{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lyle's Helpful Development Documents # Azure DevOps Setup # Create Azure DevOps Service Connections Create Azure DevOps Environments Create Azure DevOps Variable Groups Create Azure DevOps Pipelines Azure Developer Command (azd) # Deploying with 'azd' (Azure Developer Command) Making Your Project 'azd' Compatible Application Insights # Querying Logs in Application Insights","title":"Home"},{"location":"#lyles-helpful-development-documents","text":"","title":"Lyle's Helpful Development Documents"},{"location":"#azure-devops-setup","text":"Create Azure DevOps Service Connections Create Azure DevOps Environments Create Azure DevOps Variable Groups Create Azure DevOps Pipelines","title":"Azure DevOps Setup"},{"location":"#azure-developer-command-azd","text":"Deploying with 'azd' (Azure Developer Command) Making Your Project 'azd' Compatible","title":"Azure Developer Command (azd)"},{"location":"#application-insights","text":"Querying Logs in Application Insights","title":"Application Insights"},{"location":"AzdCompatibility/","text":"Converting a Project to use AZD Command Line Deploy # The Azure Developer CLI (azd) is an open-source tool that accelerates the time it takes to get started on Azure. azd provides a set of developer-friendly commands that map to key stages in a workflow (code, build, deploy, monitor). Converting a project to use the AZD commands is a matter following a few conventions and adding a few files to the project. Folder Conventions # Infra Folder: The main.bicep file is the key to this process and it must reside in a folder named \"infra\". Src Folder: Source code for the project should reside in a folder named \"src\". Key Files # There are four key files that drive the AZD process: Folder File Description / azure.yaml Build Process Definition /infra/ main.bicep Azure Resource Definition /infra/ main.parameters.json Resource Parameters /github/workflows/ azure-dev.yml GitHub Action to Build and Deploy /azure.yaml # The azure.yaml file defines where to find the infrastructure files, and what to build. It is possible to override the location and name of the main.bicep file name by overriding the infra.path and infra.module values. This example shows how to build and deploy a C# Azure Function. name: <projectName> infra: provider: bicep path: infra module: main pipeline: provider: github services: function: project: src/<your CSProj Name>/ language: csharp host: function .github/workflows/azure-dev.yml # The azure-dev.yml file creates the GitHub action that will build the Azure resources and deploy the application based on the user inputs. on: workflow_dispatch: push: branches: - main - master pull_request: branches: - main - master jobs: build: runs-on: ubuntu-latest container: image: mcr.microsoft.com/azure-dev-cli-apps:latest steps: - name: Checkout uses: actions/checkout@v2 - name: Log in with Azure uses: azure/login@v1 with: creds: ${{ secrets.AZURE_CREDENTIALS }} - name: Azure Dev Provision run: azd provision --no-prompt env: AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }} AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }} AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }} - name: Azure Dev Deploy run: azd deploy --no-prompt env: AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }} AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }} AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }} /infra/main.bicep # The main.bicep file is the file that defines what is deployed to Azure, and it can be modified to do is required for the project. However, the input parameters are limited to name, location, and principal. targetScope = 'subscription' param name string param location string param principalId string = '' var resourceToken = toLower(uniqueString(subscription().id, name)) resource resourceGroup 'Microsoft.Resources/resourceGroups@2020-06-01' = { name: 'rg-${name}' location: location } module resources './Bicep/main.bicep' = { name: 'resources-${resourceToken}' scope: resourceGroup params: { name: name location: location principalId: principalId resourceToken: resourceToken } } /infra/main.parameters.json # The main.parameters.json file defines the three required input parameters that are passed in by the AZD command to the main.bicep file. { \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#\", \"contentVersion\": \"1.0.0.0\", \"parameters\": { \"name\": { \"value\": \"${AZURE_ENV_NAME}\" }, \"location\": { \"value\": \"${AZURE_LOCATION}\" }, \"principalId\": { \"value\": \"${AZURE_PRINCIPAL_ID}\" } } } Setup Complete # Once you have these files and folders in place, the AZD commands should begin to work properly. There are many other options that can be explored, this is just one example that works for an Azure Function. Reference # Make your project compatible with Azure Developer CLI Azure Developer CLI Reference Introducing the Azure Developer CLI - Azure SDK Blog","title":"Making Your Project 'azd' Compatible"},{"location":"AzdCompatibility/#converting-a-project-to-use-azd-command-line-deploy","text":"The Azure Developer CLI (azd) is an open-source tool that accelerates the time it takes to get started on Azure. azd provides a set of developer-friendly commands that map to key stages in a workflow (code, build, deploy, monitor). Converting a project to use the AZD commands is a matter following a few conventions and adding a few files to the project.","title":"Converting a Project to use AZD Command Line Deploy"},{"location":"AzdCompatibility/#folder-conventions","text":"Infra Folder: The main.bicep file is the key to this process and it must reside in a folder named \"infra\". Src Folder: Source code for the project should reside in a folder named \"src\".","title":"Folder Conventions"},{"location":"AzdCompatibility/#key-files","text":"There are four key files that drive the AZD process: Folder File Description / azure.yaml Build Process Definition /infra/ main.bicep Azure Resource Definition /infra/ main.parameters.json Resource Parameters /github/workflows/ azure-dev.yml GitHub Action to Build and Deploy","title":"Key Files"},{"location":"AzdCompatibility/#azureyaml","text":"The azure.yaml file defines where to find the infrastructure files, and what to build. It is possible to override the location and name of the main.bicep file name by overriding the infra.path and infra.module values. This example shows how to build and deploy a C# Azure Function. name: <projectName> infra: provider: bicep path: infra module: main pipeline: provider: github services: function: project: src/<your CSProj Name>/ language: csharp host: function","title":"/azure.yaml"},{"location":"AzdCompatibility/#githubworkflowsazure-devyml","text":"The azure-dev.yml file creates the GitHub action that will build the Azure resources and deploy the application based on the user inputs. on: workflow_dispatch: push: branches: - main - master pull_request: branches: - main - master jobs: build: runs-on: ubuntu-latest container: image: mcr.microsoft.com/azure-dev-cli-apps:latest steps: - name: Checkout uses: actions/checkout@v2 - name: Log in with Azure uses: azure/login@v1 with: creds: ${{ secrets.AZURE_CREDENTIALS }} - name: Azure Dev Provision run: azd provision --no-prompt env: AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }} AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }} AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }} - name: Azure Dev Deploy run: azd deploy --no-prompt env: AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }} AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }} AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}","title":".github/workflows/azure-dev.yml"},{"location":"AzdCompatibility/#inframainbicep","text":"The main.bicep file is the file that defines what is deployed to Azure, and it can be modified to do is required for the project. However, the input parameters are limited to name, location, and principal. targetScope = 'subscription' param name string param location string param principalId string = '' var resourceToken = toLower(uniqueString(subscription().id, name)) resource resourceGroup 'Microsoft.Resources/resourceGroups@2020-06-01' = { name: 'rg-${name}' location: location } module resources './Bicep/main.bicep' = { name: 'resources-${resourceToken}' scope: resourceGroup params: { name: name location: location principalId: principalId resourceToken: resourceToken } }","title":"/infra/main.bicep"},{"location":"AzdCompatibility/#inframainparametersjson","text":"The main.parameters.json file defines the three required input parameters that are passed in by the AZD command to the main.bicep file. { \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#\", \"contentVersion\": \"1.0.0.0\", \"parameters\": { \"name\": { \"value\": \"${AZURE_ENV_NAME}\" }, \"location\": { \"value\": \"${AZURE_LOCATION}\" }, \"principalId\": { \"value\": \"${AZURE_PRINCIPAL_ID}\" } } }","title":"/infra/main.parameters.json"},{"location":"AzdCompatibility/#setup-complete","text":"Once you have these files and folders in place, the AZD commands should begin to work properly. There are many other options that can be explored, this is just one example that works for an Azure Function.","title":"Setup Complete"},{"location":"AzdCompatibility/#reference","text":"Make your project compatible with Azure Developer CLI Azure Developer CLI Reference Introducing the Azure Developer CLI - Azure SDK Blog","title":"Reference"},{"location":"AzdDeploy/","text":"AZD Command Line Deploy # The Azure Developer CLI (azd) is an open-source tool that accelerates the time it takes to get started on Azure. azd provides a set of developer-friendly commands that map to key stages in a workflow (code, build, deploy, monitor). If a project is configured to use azd, then these commands and notes apply. To learn how to make a project compatible with azd, see Making Your Project 'azd' Compatible . Commands # The three commands of most interest are: azd up : provisions Azure resources, builds app, and deploys it to Azure azd provision : provisions Azure resources azd deploy : builds app and deploys it to existing Azure resources Typically a developer with either do the up command to do everything at once, or do the provision and deploy commands separately. Environment Names # When this command is run for the first time, a prompt will ask for the the \"Environment Name\", the Azure Subscription to use and the Azure Region to deploy to. Choose the \"Environment Name\" carefully, as it will be used as the basis to name all of the resources, so it must be unique. Note: I like to use a naming style like [myInitials]-[appName] as the format for Environment Name. For example, if Environment Name is equal to: lll-function-demo AZD will create a Azure resources with these names: Azure Resource Name Resource Group rg-lll-function-demo Azure Function lll-function-demofunction Storage accounts and other resources will be named in a similarly fashion. Visual Studio Code # There is a Azure Developer CLI extension available in Visual Studio Code. If that is installed, it is easy to pop up the command window like this: Command Line # These commands can also be run on the command line, like this: > azd up Example Input # Example of Resources Created # Reference # Azure Developer CLI Reference Introducing the Azure Developer CLI - Azure SDK Blog Make your project compatible with Azure Developer CLI","title":"Deploying with 'azd' (Azure Developer Command)"},{"location":"AzdDeploy/#azd-command-line-deploy","text":"The Azure Developer CLI (azd) is an open-source tool that accelerates the time it takes to get started on Azure. azd provides a set of developer-friendly commands that map to key stages in a workflow (code, build, deploy, monitor). If a project is configured to use azd, then these commands and notes apply. To learn how to make a project compatible with azd, see Making Your Project 'azd' Compatible .","title":"AZD Command Line Deploy"},{"location":"AzdDeploy/#commands","text":"The three commands of most interest are: azd up : provisions Azure resources, builds app, and deploys it to Azure azd provision : provisions Azure resources azd deploy : builds app and deploys it to existing Azure resources Typically a developer with either do the up command to do everything at once, or do the provision and deploy commands separately.","title":"Commands"},{"location":"AzdDeploy/#environment-names","text":"When this command is run for the first time, a prompt will ask for the the \"Environment Name\", the Azure Subscription to use and the Azure Region to deploy to. Choose the \"Environment Name\" carefully, as it will be used as the basis to name all of the resources, so it must be unique. Note: I like to use a naming style like [myInitials]-[appName] as the format for Environment Name. For example, if Environment Name is equal to: lll-function-demo AZD will create a Azure resources with these names: Azure Resource Name Resource Group rg-lll-function-demo Azure Function lll-function-demofunction Storage accounts and other resources will be named in a similarly fashion.","title":"Environment Names"},{"location":"AzdDeploy/#visual-studio-code","text":"There is a Azure Developer CLI extension available in Visual Studio Code. If that is installed, it is easy to pop up the command window like this:","title":"Visual Studio Code"},{"location":"AzdDeploy/#command-line","text":"These commands can also be run on the command line, like this: > azd up","title":"Command Line"},{"location":"AzdDeploy/#example-input","text":"","title":"Example Input"},{"location":"AzdDeploy/#example-of-resources-created","text":"","title":"Example of Resources Created"},{"location":"AzdDeploy/#reference","text":"Azure Developer CLI Reference Introducing the Azure Developer CLI - Azure SDK Blog Make your project compatible with Azure Developer CLI","title":"Reference"},{"location":"CreateDevOpsEnvironments/","text":"Create Azure DevOps Environments # For multi-stage deployments (i.e. DEV/QA/PROD), a DevOps Environment should be set up for each stage that that is being published. On that Environment definition, the rules that are needed can set up, such as specific approvers that are needed to publish to that environment. Environment Setup # Step 1: Go to the project environments page and select New environment: Step 2: Enter the name of the new environment: Step 3: To add an approver for an environment, select that environment, click on the \"More\" ellipsis, and select \"Approvals and checks\" Step 4: Click on the plus sign to add new checks: Step 5: Select the \"Approvals\" check from the list: Step 6: Add the authorized approvers to the list and click \"Create\": The environment should be ready to use now!","title":"Create Azure DevOps Environments"},{"location":"CreateDevOpsEnvironments/#create-azure-devops-environments","text":"For multi-stage deployments (i.e. DEV/QA/PROD), a DevOps Environment should be set up for each stage that that is being published. On that Environment definition, the rules that are needed can set up, such as specific approvers that are needed to publish to that environment.","title":"Create Azure DevOps Environments"},{"location":"CreateDevOpsEnvironments/#environment-setup","text":"Step 1: Go to the project environments page and select New environment: Step 2: Enter the name of the new environment: Step 3: To add an approver for an environment, select that environment, click on the \"More\" ellipsis, and select \"Approvals and checks\" Step 4: Click on the plus sign to add new checks: Step 5: Select the \"Approvals\" check from the list: Step 6: Add the authorized approvers to the list and click \"Create\": The environment should be ready to use now!","title":"Environment Setup"},{"location":"CreateDevOpsVariableGroups/","text":"Create Azure DevOps Variable Groups # To create variable groups to be used in Azure DevOps pipelines, customize and run this command in the Azure Cloud Shell, adding in the variables and values that you need for your project. az login az pipelines variable-group create --organization=https://dev.azure.com/<yourAzDOOrg>/ --project='<yourAzDOProject>' --name <yourVariableGroupName> --variables appName='yourAppName' environmentCode='dev' serviceConnectionName='<yourServiceConnection>' azureSubscription='<yourAzureSubscriptionName>' subscriptionId='<yourSubscriptionId>' location='eastus' bicepDirectory='.infrastructure/Bicep/' bicepFileName='main.bicep' yourVariableName='yourVariableValue'","title":"Create Azure DevOps Variable Groups"},{"location":"CreateDevOpsVariableGroups/#create-azure-devops-variable-groups","text":"To create variable groups to be used in Azure DevOps pipelines, customize and run this command in the Azure Cloud Shell, adding in the variables and values that you need for your project. az login az pipelines variable-group create --organization=https://dev.azure.com/<yourAzDOOrg>/ --project='<yourAzDOProject>' --name <yourVariableGroupName> --variables appName='yourAppName' environmentCode='dev' serviceConnectionName='<yourServiceConnection>' azureSubscription='<yourAzureSubscriptionName>' subscriptionId='<yourSubscriptionId>' location='eastus' bicepDirectory='.infrastructure/Bicep/' bicepFileName='main.bicep' yourVariableName='yourVariableValue'","title":"Create Azure DevOps Variable Groups"},{"location":"CreateNewPipeline/","text":"Create Azure DevOps Pipelines # To create an Azure DevOps pipeline from an existing YML file in a GitHub repository, follow these steps. Step 1: Click New pipeline from the Pipeline section of the Azure DevOps project Step 2: Select source as GitHub: Step 3: Select the GitHub repository Step 4: Select Existing Pipelines YAML file Step 5: Select the desired pipeline Step 6: When the pipeline source is shown, select More Actions and Save the file. Don't worry about details yet, there are still more steps before it's ready to Run. Step 7: Once the new pipeline page is shown, click the Edit button. Step 8: This may not seem intuitive, but the detailed editor is hidden behind the \"Triggers\" option of the pipeline editor, so select that. Step 9: On the detailed pipeline editor, select Variables -> Variable Groups, and link the variable groups that are needed for this pipeline. Step 10: More than one variable group can be added to a pipeline. Step 11: Switch to the YAML tab and update the name of the pipeline to be what is desired. Now the \"Save and queue\" is ready, and the pipeline can be run.","title":"Create Azure DevOps Pipelines"},{"location":"CreateNewPipeline/#create-azure-devops-pipelines","text":"To create an Azure DevOps pipeline from an existing YML file in a GitHub repository, follow these steps. Step 1: Click New pipeline from the Pipeline section of the Azure DevOps project Step 2: Select source as GitHub: Step 3: Select the GitHub repository Step 4: Select Existing Pipelines YAML file Step 5: Select the desired pipeline Step 6: When the pipeline source is shown, select More Actions and Save the file. Don't worry about details yet, there are still more steps before it's ready to Run. Step 7: Once the new pipeline page is shown, click the Edit button. Step 8: This may not seem intuitive, but the detailed editor is hidden behind the \"Triggers\" option of the pipeline editor, so select that. Step 9: On the detailed pipeline editor, select Variables -> Variable Groups, and link the variable groups that are needed for this pipeline. Step 10: More than one variable group can be added to a pipeline. Step 11: Switch to the YAML tab and update the name of the pipeline to be what is desired. Now the \"Save and queue\" is ready, and the pipeline can be run.","title":"Create Azure DevOps Pipelines"},{"location":"CreateServiceConnections/","text":"Create Azure DevOps Service Connections # To enable Azure DevOps pipelines to run against a GitHub repository, both GitHub Service Connection and an Azure Subscription Service Connection need to be set up. GitHub Service Connection # Step 1: Go to the project settings page: Step 2: Select Service Connections: Step 3: Add new Service Connection: GitHub Service Connection # Step 4: Select GitHub Step 5: Authenticate GitHub using a PAT token. (For ease of use, it is recommended that the GitHub service connection name be the same as the GitHub account is being referenced.) Azure Subscription Connection # Step 6: Select Azure Resource Manager Step 7: Create a Service Principal and Client Secret before this step is executed, then select the Service principal (manual) option. Step 8: For this step, things that are needed include the Azure Subscription name and Id, the Azure AD Service Principal Client Id and Tenant Id, and the Client Secret that was created in the previous step. (For ease of use, it is recommended that the Azure service connection name be the same as the Azure Subscription name that is being referenced.) Now go create some pipelines! References: # For more information, see: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml","title":"Create Azure DevOps Service Connections"},{"location":"CreateServiceConnections/#create-azure-devops-service-connections","text":"To enable Azure DevOps pipelines to run against a GitHub repository, both GitHub Service Connection and an Azure Subscription Service Connection need to be set up.","title":"Create Azure DevOps Service Connections"},{"location":"CreateServiceConnections/#github-service-connection","text":"Step 1: Go to the project settings page: Step 2: Select Service Connections: Step 3: Add new Service Connection:","title":"GitHub Service Connection"},{"location":"CreateServiceConnections/#github-service-connection_1","text":"Step 4: Select GitHub Step 5: Authenticate GitHub using a PAT token. (For ease of use, it is recommended that the GitHub service connection name be the same as the GitHub account is being referenced.)","title":"GitHub Service Connection"},{"location":"CreateServiceConnections/#azure-subscription-connection","text":"Step 6: Select Azure Resource Manager Step 7: Create a Service Principal and Client Secret before this step is executed, then select the Service principal (manual) option. Step 8: For this step, things that are needed include the Azure Subscription name and Id, the Azure AD Service Principal Client Id and Tenant Id, and the Client Secret that was created in the previous step. (For ease of use, it is recommended that the Azure service connection name be the same as the Azure Subscription name that is being referenced.) Now go create some pipelines!","title":"Azure Subscription Connection"},{"location":"CreateServiceConnections/#references","text":"For more information, see: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml","title":"References:"},{"location":"ReadAppInsightsLogFiles/","text":"Querying Logs in Application Insights # Using the Application Insights service is a great way to log info about your application, but sometimes reading the logs can be a little difficult. The Kusto queries below show an example of how you can query the logs generated by your application, which are stored in the Application Insights service and can be viewed in the Azure Portal. View log entries in Application Insights # traces | project timestamp, customDimensions[\"eventSource\"], message, customDimensions.LogLevel, severityLevel, customDimensions // | where customDimensions.eventSource startswith \"myEventSource\" | filter customDimensions[\"eventSource\"] != '' and timestamp >= ago(30m) // ago(1d) ago(8h) ago(15m) | extend source = tostring(customDimensions[\"eventSource\"]) | take 200 | order by timestamp desc View every time this function was called, not just the trace info # requests | project timestamp,id,operation_Name,success,resultCode,duration,operation_Id,cloud_RoleName,invocationId=customDimensions['InvocationId'] | where timestamp > ago(1d) | where cloud_RoleName =~ 'myFunctionAppName' and operation_Name =~ 'myFunctionName' | order by timestamp desc | take 200 References # For more information about the Kusto Query Language, see: https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/ Learning the Kusto Query Language","title":"Querying Logs in Application Insights"},{"location":"ReadAppInsightsLogFiles/#querying-logs-in-application-insights","text":"Using the Application Insights service is a great way to log info about your application, but sometimes reading the logs can be a little difficult. The Kusto queries below show an example of how you can query the logs generated by your application, which are stored in the Application Insights service and can be viewed in the Azure Portal.","title":"Querying Logs in Application Insights"},{"location":"ReadAppInsightsLogFiles/#view-log-entries-in-application-insights","text":"traces | project timestamp, customDimensions[\"eventSource\"], message, customDimensions.LogLevel, severityLevel, customDimensions // | where customDimensions.eventSource startswith \"myEventSource\" | filter customDimensions[\"eventSource\"] != '' and timestamp >= ago(30m) // ago(1d) ago(8h) ago(15m) | extend source = tostring(customDimensions[\"eventSource\"]) | take 200 | order by timestamp desc","title":"View log entries in Application Insights"},{"location":"ReadAppInsightsLogFiles/#view-every-time-this-function-was-called-not-just-the-trace-info","text":"requests | project timestamp,id,operation_Name,success,resultCode,duration,operation_Id,cloud_RoleName,invocationId=customDimensions['InvocationId'] | where timestamp > ago(1d) | where cloud_RoleName =~ 'myFunctionAppName' and operation_Name =~ 'myFunctionName' | order by timestamp desc | take 200","title":"View every time this function was called, not just the trace info"},{"location":"ReadAppInsightsLogFiles/#references","text":"For more information about the Kusto Query Language, see: https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/ Learning the Kusto Query Language","title":"References"}]}