{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lyle's Helpful Development Documents # Create Azure DevOps Service Connections Create Azure DevOps Environments Create Azure DevOps Variable Groups Create Azure DevOps Pipeline(s) Read App Insights Log Files","title":"Home"},{"location":"#lyles-helpful-development-documents","text":"Create Azure DevOps Service Connections Create Azure DevOps Environments Create Azure DevOps Variable Groups Create Azure DevOps Pipeline(s) Read App Insights Log Files","title":"Lyle's Helpful Development Documents"},{"location":"CreateDevOpsEnvironments/","text":"Set up an Azure DevOps Environments # For multi-stage deployments (i.e. DEV/QA/PROD), a DevOps Environment should be set up for each stage that that is being published. On that Environment definition, the rules that are needed can set up, such as specific approvers that are needed to publish to that environment. Environment Setup # Step 1: Go to the project environments page and select New environment: Step 2: Enter the name of the new environment: Step 3: To add an approver for an environment, select that environment, click on the \"More\" ellipsis, and select \"Approvals and checks\" Step 4: Click on the plus sign to add new checks: Step 5: Select the \"Approvals\" check from the list: Step 6: Add the authorized approvers to the list and click \"Create\": The environment should be ready to use now!","title":"Create Azure DevOps Environments"},{"location":"CreateDevOpsEnvironments/#set-up-an-azure-devops-environments","text":"For multi-stage deployments (i.e. DEV/QA/PROD), a DevOps Environment should be set up for each stage that that is being published. On that Environment definition, the rules that are needed can set up, such as specific approvers that are needed to publish to that environment.","title":"Set up an Azure DevOps Environments"},{"location":"CreateDevOpsEnvironments/#environment-setup","text":"Step 1: Go to the project environments page and select New environment: Step 2: Enter the name of the new environment: Step 3: To add an approver for an environment, select that environment, click on the \"More\" ellipsis, and select \"Approvals and checks\" Step 4: Click on the plus sign to add new checks: Step 5: Select the \"Approvals\" check from the list: Step 6: Add the authorized approvers to the list and click \"Create\": The environment should be ready to use now!","title":"Environment Setup"},{"location":"CreateDevOpsVariableGroups/","text":"Set up an Azure DevOps Variable Groups # Note: These Azure DevOps pipelines needs a variable group \"DurableDemo\" # To create these variable groups, customize and run this command in the Azure Cloud Shell, once for each environment: az login az pipelines variable-group create --organization=https://dev.azure.com/<yourAzDOOrg>/ --project='<yourAzDOProject>' --name DurableFunctions-<env> --variables orgPrefix='<yourInitials>' appPrefix='durabledemo' appSuffix='' environmentCode='dev' serviceConnectionName='<yourServiceConnection>' azureSubscription='<yourAzureSubscriptionName>' subscriptionId='<yourSubscriptionId>' location='eastus' bicepDirectory='.infrastructure/Bicep/' bicepFileName='main.bicep' storageSku='Standard_LRS' functionAppSku='Y1' functionAppSkuFamily='Y' functionAppSkuTier='Dynamic' runSecurityDevOpScan='false' keyVaultOwnerUserId1='owner1SID' keyVaultOwnerUserId2='owner1SID' twilioAccountSid='<twilioAccountSid>' twilioAuthToken='<twilioAuthToken>' twilioPhoneNumber='<twilioPhoneNumber>'","title":"Create Azure DevOps Variable Groups"},{"location":"CreateDevOpsVariableGroups/#set-up-an-azure-devops-variable-groups","text":"","title":"Set up an Azure DevOps Variable Groups"},{"location":"CreateDevOpsVariableGroups/#note-these-azure-devops-pipelines-needs-a-variable-group-durabledemo","text":"To create these variable groups, customize and run this command in the Azure Cloud Shell, once for each environment: az login az pipelines variable-group create --organization=https://dev.azure.com/<yourAzDOOrg>/ --project='<yourAzDOProject>' --name DurableFunctions-<env> --variables orgPrefix='<yourInitials>' appPrefix='durabledemo' appSuffix='' environmentCode='dev' serviceConnectionName='<yourServiceConnection>' azureSubscription='<yourAzureSubscriptionName>' subscriptionId='<yourSubscriptionId>' location='eastus' bicepDirectory='.infrastructure/Bicep/' bicepFileName='main.bicep' storageSku='Standard_LRS' functionAppSku='Y1' functionAppSkuFamily='Y' functionAppSkuTier='Dynamic' runSecurityDevOpScan='false' keyVaultOwnerUserId1='owner1SID' keyVaultOwnerUserId2='owner1SID' twilioAccountSid='<twilioAccountSid>' twilioAuthToken='<twilioAuthToken>' twilioPhoneNumber='<twilioPhoneNumber>'","title":"Note: These Azure DevOps pipelines needs a variable group \"DurableDemo\""},{"location":"CreateNewPipeline/","text":"Set up an Azure DevOps pipeline # To create an Azure DevOps pipeline from an existing YML file in a GitHub repository, follow these steps. This project has a \"deploy-infra-and-code.yml\" pipeline, which will deploy all of the Azure resources using Bicep, and then deploy the function app to those resources. This project also has a separate \"deploy-infra-only.yml\" and \"deploy-code-only.yml\" pipelines, which will let the author create two pipelines which separate those functions. Either set of pipelines will work properly. Step 1: Click New pipeline from the Pipeline section of the Azure DevOps project Step 2: Select source as GitHub: Step 3: Select the GitHub repository Step 4: Select Existing Pipelines YAML file Step 5: Select the desired pipeline Step 6: When the pipeline source is shown, select More Actions and Save the file. Don't worry about details yet, there are still more steps before it's ready to Run. Step 7: Once the new pipeline page is shown, click the Edit button. Step 8: This may not seem intuitive, but the detailed editor is hidden behind the \"Triggers\" option of the pipeline editor, so select that. Step 9: On the detailed pipeline editor, select Variables -> Variable Groups, and link the variable groups that are needed for this pipeline. Step 10: More than one variable group can be added to a pipeline. Step 11: Switch to the YAML tab and update the name of the pipeline to be what is desired. Now the \"Save and queue\" is ready, and the pipeline can be run.","title":"Create Azure DevOps Pipeline(s)"},{"location":"CreateNewPipeline/#set-up-an-azure-devops-pipeline","text":"To create an Azure DevOps pipeline from an existing YML file in a GitHub repository, follow these steps. This project has a \"deploy-infra-and-code.yml\" pipeline, which will deploy all of the Azure resources using Bicep, and then deploy the function app to those resources. This project also has a separate \"deploy-infra-only.yml\" and \"deploy-code-only.yml\" pipelines, which will let the author create two pipelines which separate those functions. Either set of pipelines will work properly. Step 1: Click New pipeline from the Pipeline section of the Azure DevOps project Step 2: Select source as GitHub: Step 3: Select the GitHub repository Step 4: Select Existing Pipelines YAML file Step 5: Select the desired pipeline Step 6: When the pipeline source is shown, select More Actions and Save the file. Don't worry about details yet, there are still more steps before it's ready to Run. Step 7: Once the new pipeline page is shown, click the Edit button. Step 8: This may not seem intuitive, but the detailed editor is hidden behind the \"Triggers\" option of the pipeline editor, so select that. Step 9: On the detailed pipeline editor, select Variables -> Variable Groups, and link the variable groups that are needed for this pipeline. Step 10: More than one variable group can be added to a pipeline. Step 11: Switch to the YAML tab and update the name of the pipeline to be what is desired. Now the \"Save and queue\" is ready, and the pipeline can be run.","title":"Set up an Azure DevOps pipeline"},{"location":"CreateServiceConnections/","text":"Set up an Azure DevOps Service Connections # To enable Azure DevOps pipelines to run against a GitHub repository, both GitHub Service Connection and an Azure Subscription Service Connection need to be set up. GitHub Service Connection # Step 1: Go to the project settings page: Step 2: Select Service Connections: Step 3: Add new Service Connection: GitHub Service Connection # Step 4: Select GitHub Step 5: Authenticate GitHub using a PAT token. (For ease of use, it is recommended that the GitHub service connection name be the same as the GitHub account is being referenced.) Azure Subscription Connection # Step 6: Select Azure Resource Manager Step 7: Create a Service Principal and Client Secret before this step is executed, then select the Service principal (manual) option. Step 8: For this step, things that are needed include the Azure Subscription name and Id, the Azure AD Service Principal Client Id and Tenant Id, and the Client Secret that was created in the previous step. (For ease of use, it is recommended that the Azure service connection name be the same as the Azure Subscription name that is being referenced.) Now go create some pipelines! References: # For more information, see: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml","title":"Create Azure DevOps Service Connections"},{"location":"CreateServiceConnections/#set-up-an-azure-devops-service-connections","text":"To enable Azure DevOps pipelines to run against a GitHub repository, both GitHub Service Connection and an Azure Subscription Service Connection need to be set up.","title":"Set up an Azure DevOps Service Connections"},{"location":"CreateServiceConnections/#github-service-connection","text":"Step 1: Go to the project settings page: Step 2: Select Service Connections: Step 3: Add new Service Connection:","title":"GitHub Service Connection"},{"location":"CreateServiceConnections/#github-service-connection_1","text":"Step 4: Select GitHub Step 5: Authenticate GitHub using a PAT token. (For ease of use, it is recommended that the GitHub service connection name be the same as the GitHub account is being referenced.)","title":"GitHub Service Connection"},{"location":"CreateServiceConnections/#azure-subscription-connection","text":"Step 6: Select Azure Resource Manager Step 7: Create a Service Principal and Client Secret before this step is executed, then select the Service principal (manual) option. Step 8: For this step, things that are needed include the Azure Subscription name and Id, the Azure AD Service Principal Client Id and Tenant Id, and the Client Secret that was created in the previous step. (For ease of use, it is recommended that the Azure service connection name be the same as the Azure Subscription name that is being referenced.) Now go create some pipelines!","title":"Azure Subscription Connection"},{"location":"CreateServiceConnections/#references","text":"For more information, see: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml","title":"References:"},{"location":"ReadAppInsightsLogFiles/","text":"Viewing Logs in Application Insights # View log entries in Application Insights # traces | project timestamp, customDimensions[\"eventSource\"], message, customDimensions.LogLevel, severityLevel, customDimensions // | where customDimensions.eventSource startswith \"Interaction\" // | where customDimensions.eventSource startswith \"Fanout\" // | where customDimensions.eventSource startswith \"Sequential\" | filter customDimensions[\"eventSource\"] != '' and timestamp >= ago(30m) // ago(1d) ago(8h) ago(15m) | extend source = tostring(customDimensions[\"eventSource\"]) | take 200 | order by timestamp desc View every time this function was called, not just the trace info # requests | project timestamp,id,operation_Name,success,resultCode,duration,operation_Id,cloud_RoleName,invocationId=customDimensions['InvocationId'] | where timestamp > ago(1d) | where cloud_RoleName =~ 'lll-durabledemo-dev' and operation_Name =~ 'Interaction_Orchestration' | order by timestamp desc | take 200","title":"Read App Insights Log Files"},{"location":"ReadAppInsightsLogFiles/#viewing-logs-in-application-insights","text":"","title":"Viewing Logs in Application Insights"},{"location":"ReadAppInsightsLogFiles/#view-log-entries-in-application-insights","text":"traces | project timestamp, customDimensions[\"eventSource\"], message, customDimensions.LogLevel, severityLevel, customDimensions // | where customDimensions.eventSource startswith \"Interaction\" // | where customDimensions.eventSource startswith \"Fanout\" // | where customDimensions.eventSource startswith \"Sequential\" | filter customDimensions[\"eventSource\"] != '' and timestamp >= ago(30m) // ago(1d) ago(8h) ago(15m) | extend source = tostring(customDimensions[\"eventSource\"]) | take 200 | order by timestamp desc","title":"View log entries in Application Insights"},{"location":"ReadAppInsightsLogFiles/#view-every-time-this-function-was-called-not-just-the-trace-info","text":"requests | project timestamp,id,operation_Name,success,resultCode,duration,operation_Id,cloud_RoleName,invocationId=customDimensions['InvocationId'] | where timestamp > ago(1d) | where cloud_RoleName =~ 'lll-durabledemo-dev' and operation_Name =~ 'Interaction_Orchestration' | order by timestamp desc | take 200","title":"View every time this function was called, not just the trace info"}]}